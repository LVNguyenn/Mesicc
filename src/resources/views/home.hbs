<div class="mt-4">
    <div class="row" id="paginated-list" data-current-page="1" aria-live="polite" style="transition:background-color 0.4s ease-in-out">
        {{#each songs}}
        <div class="col-6 col-lg-2 cardhold">
            <div class="card card-song-item">
                <a href="/songs/{{this.slug}}">
                    <img class="card-img-top" src="{{this.image}}" alt="{{this.name}}">
                </a>
                <div class="card-body d-flex">
                    <a href="/songs/{{this.slug}}" class="col-12">
                        <h5 class="card-title">{{this.name}}</h5>
                    </a>
                    <div class="d-flex" style="width:100%;flex-wrap:wrap;align-items:flex-end;justify-content:center">
                    <p class="card-text col-12 d-flex" style="justify-content:center;align-items:flex-end">{{this.singer}}</p>
                    <a href="/songs/{{this.slug}}" class="listen-btn btn btn-primary col-12">Nghe nháº¡c</a>
                    </div>
                </div>
            </div>
        </div>
        {{/each}}

    </div>
</div>
<div id="songcount" style="display:none">{{this.count}}</div>
<div class="d-flex" style="justify-content:center">
    <nav class="pagination-container" style="align-items:center">
		<div class="col-2">
		</div>
        <button class="pagination-button" id="prev-button" aria-label="Previous page" title="Previous page">&lt;
        </button>
        
        <div id="pagination-numbers">  
        </div>
        
        <button class="pagination-button" id="next-button" aria-label="Next page" title="Next page">&gt;
        </button>
		<label class="col-1">Go to page:</label>
		<input type="text" id="gotopage" class="col-1 px-1" style="border-radius:10px">
    </nav>
</div>
<script>

	document.getElementById('gotopage').onkeypress=function(e){
		if(e.key=="Enter"||e.keyCode==13)
		{
			gotopage($('#gotopage').val());
		}
	}
	function gotopage(val)
	{
		console.log("ok");
		var searchparams= new URLSearchParams(location.search);
		searchparams.set('i',Number(val));
		location.search=searchparams.toString();
	}
        const paginationNumbers = document.getElementById("pagination-numbers");
        const paginatedList = document.getElementById("paginated-list");
        const listItems = document.getElementById('songcount').innerHTML;
        const nextButton = document.getElementById("next-button");
        const prevButton = document.getElementById("prev-button");

        const paginationLimit = 12;
        const pageCount = Math.ceil(listItems / paginationLimit);
        let currentPage = 1;
		$(document).ready(function(){
			document.getElementById('gotopage').placeholder='Max Page: '+pageCount;
		})
	
		const disableButton = (button) => {
			console.log("disabled");
		button.classList.add("disabled");
		button.setAttribute("disabled", true);
		};

		const enableButton = (button) => {
		button.classList.remove("disabled");
		button.removeAttribute("disabled");
		};
		const handlePageButtonsStatus = () => {
		if (currentPage == 1) {
			console.log("disable prev");
			disableButton(prevButton);
		} 
		else {
			console.log("enable prev");
			enableButton(prevButton);
		}

		if (pageCount == currentPage) {
			console.log("disable next");
			disableButton(nextButton);
		} 
		else {
			console.log("enable next");
			enableButton(nextButton);
		}
		};

		/*const handleActivePageNumber = () => {
		document.querySelectorAll(".pagination-number").forEach((button) => {
			button.classList.remove("active");
			const pageIndex = Number(button.getAttribute("page-index"));
			if (pageIndex == currentPage) {
			button.classList.add("active");
			}
		});
		};*/

		const appendPageNumber = (index) => {
		const pageNumber = document.createElement("button");
		pageNumber.className = "pagination-number";
		pageNumber.innerHTML = index;
		pageNumber.setAttribute("page-index", index);
		pageNumber.setAttribute("aria-label", "Page " + index);
		pageNumber.setAttribute('id',"pagination-number-"+index);
		paginationNumbers.appendChild(pageNumber);
		};

		const getPaginationNumbers = () => {
			for (let i = 1; i <= pageCount; i++) {
				let tempel=document.getElementById("pagination-number-"+i);
				if(tempel!=null && typeof(tempel)!="undefined")
				{
					tempel.remove();
				}
				if(i>=Number(currentPage)-1 && i<=Number(currentPage)+1)
				{
					appendPageNumber(i);
				}
			}
		};

		const setCurrentPage = (pageNum) => {
		console.log("set page");
		console.log(pageNum);
		currentPage = pageNum;
		
		//handleActivePageNumber();
		handlePageButtonsStatus();
		
		const prevRange = (pageNum - 1) * paginationLimit;
		const currRange = pageNum * paginationLimit;


		localStorage.currPage=currentPage;
		};
		if(!localStorage.currPage)
		{
			localStorage.currPage=1;
		}
		window.addEventListener("load", () => {
		//var searchparams= new URLSearchParams(location.search);
		//searchparams.set('i',currentPage);
		//var newRelativePathQuery = window.location.pathname + '?' + searchparams.toString();
		//history.pushState(null, '', newRelativePathQuery);
		var params=new URLSearchParams(location.search);
		if(!params.has('i'))
		{
			params.set('i','1');
			window.history.pushState(null,'','?'+params.toString());
		}
		localStorage.currPage=params.get('i');
		setCurrentPage(localStorage.currPage);
		getPaginationNumbers();
		curpagebtn=document.getElementById('pagination-number-'+currentPage);
		curpagebtn.classList.add('active');
		prevButton.addEventListener("click", () => {
			if(currentPage<=1)
			{
				return;
			}
			var searchparams= new URLSearchParams(location.search);
			searchparams.set('i',Number(currentPage)-1);
			location.search=searchparams.toString();
		});

		nextButton.addEventListener("click", () => {
			if(currentPage>=pageCount)
			{
				return;
			}
			var searchparams= new URLSearchParams(location.search);
			searchparams.set('i',Number(currentPage)+1);
			location.search=searchparams.toString();
		});

		document.querySelectorAll(".pagination-number").forEach((button) => {
			const pageIndex = Number(button.getAttribute("page-index"));
			if (pageIndex) {
			button.addEventListener("click", () => {
				var searchparams= new URLSearchParams(location.search);
				searchparams.set('i',pageIndex);
				location.search=searchparams.toString();
			});
			}
		});
		});
</script>